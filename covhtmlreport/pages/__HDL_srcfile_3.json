var g_sourceLines = [
'/* Arthmetic Logic Unit',
'The ALU is the computational unit of your processor. This unit is responsible for mathmatic and logical operations',
'on data values. This is a combinational unit which means it does not have any registers (flip-flops) in the design.',
'Figure 3 shows the basic structure of the alu.',
'*/',
'',
'`include "cpu_types_pkg.vh"',
'`include "alu_if.vh"',
'',
'import cpu_types_pkg::*;',
'',
'module alu (',
'    alu_if.alu aluif',
');',
'    ',
'    always_comb begin',
'        aluif.overflow = \'0;',
'        aluif.outputPort = \'0;',
'',
'        casez (aluif.aluop)',
'            ALU_SLL: // shift left',
'                aluif.outputPort = aluif.portA &lt;&lt; aluif.portB;',
'',
'            ALU_SRL: //shift right',
'                aluif.outputPort = aluif.portA &gt;&gt; aluif.portB;',
'',
'            ALU_ADD: begin',
'                aluif.outputPort = aluif.portA + aluif.portB;',
'                if (aluif.portA[31] == aluif.portB[31] &amp;&amp; aluif.portA[31] != aluif.outputPort[31])',
'                    aluif.overflow = 1;',
'            end',
'',
'            ALU_SUB: begin',
'                aluif.outputPort = aluif.portA - aluif.portB;',
'                if (aluif.portA[31] != aluif.portB[31] &amp;&amp; aluif.portA[31] != aluif.outputPort[31])',
'                    aluif.overflow = 1;',
'            end',
'',
'            ALU_AND:',
'                aluif.outputPort = aluif.portA &amp; aluif.portB;',
'',
'            ALU_OR:',
'                aluif.outputPort = aluif.portA | aluif.portB;',
'',
'            ALU_XOR:',
'                aluif.outputPort = aluif.portA ^ aluif.portB;',
'',
'            ALU_NOR:',
'                aluif.outputPort = ~(aluif.portA | aluif.portB);',
'',
'            ALU_SLT: //signed less than',
'                aluif.outputPort = ($signed(aluif.portA) &lt; $signed(aluif.portB));',
'           ',
'            ALU_SLTU: //unsigned less than',
'                aluif.outputPort = (aluif.portA &lt; aluif.portB);',
'        endcase',
'    end',
'',
'    assign aluif.negative = aluif.outputPort[31] ? 1 : 0;',
'    assign aluif.zero = aluif.outputPort == \'0 ? 1 : 0;',
'',
'endmodule'
];
countinueBuildStmtTable(g_sourceLines);
