
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a><q-m>/* Arthmetic Logic Unit</q-m>
<a name="2"><q-n>     2  </q-n></a><q-m>The ALU is the computational unit of your processor. This unit is responsible for mathmatic and logical operations</q-m>
<a name="3"><q-n>     3  </q-n></a><q-m>on data values. This is a combinational unit which means it does not have any registers (flip-flops) in the design.</q-m>
<a name="4"><q-n>     4  </q-n></a><q-m>Figure 3 shows the basic structure of the alu.</q-m>
<a name="5"><q-n>     5  </q-n></a><q-m>*/</q-m>
<a name="6"><q-n>     6  </q-n></a>
<a name="7"><q-n>     7  </q-n></a>`<q-i>include</q-w> <q-l>"cpu_types_pkg.vh"</q-l>
<a name="8"><q-n>     8  </q-n></a>`<q-i>include</q-w> <q-l>"alu_if.vh"</q-l>
<a name="9"><q-n>     9  </q-n></a>
<a name="10"><q-n>     10  </q-n></a><q-w>import</q-w> cpu_types_pkg::*;
<a name="11"><q-n>     11  </q-n></a>
<a name="12"><q-n>     12  </q-n></a><q-w>module</q-w> alu (
<a name="13"><q-n>     13  </q-n></a>    alu_if.alu aluif
<a name="14"><q-n>     14  </q-n></a>);
<a name="15"><q-n>     15  </q-n></a>    
<a name="16"><q-n>     16  </q-n></a>    <q-w>always_comb</q-w> <q-w>begin</q-w>
<a name="17"><q-n>     17  </q-n></a>        aluif.overflow = '0;
<a name="18"><q-n>     18  </q-n></a>        aluif.outputPort = '0;
<a name="19"><q-n>     19  </q-n></a>
<a name="20"><q-n>     20  </q-n></a>        <q-w>casez</q-w> (aluif.aluop)
<a name="21"><q-n>     21  </q-n></a>            ALU_SLL: <q-m>// shift left</q-m>
<a name="22"><q-n>     22  </q-n></a>                aluif.outputPort = aluif.portA &lt;&lt; aluif.portB;
<a name="23"><q-n>     23  </q-n></a>
<a name="24"><q-n>     24  </q-n></a>            ALU_SRL: <q-m>//shift right</q-m>
<a name="25"><q-n>     25  </q-n></a>                aluif.outputPort = aluif.portA &gt;&gt; aluif.portB;
<a name="26"><q-n>     26  </q-n></a>
<a name="27"><q-n>     27  </q-n></a>            ALU_ADD: <q-w>begin</q-w>
<a name="28"><q-n>     28  </q-n></a>                aluif.outputPort = aluif.portA + aluif.portB;
<a name="29"><q-n>     29  </q-n></a>                <q-w>if</q-w> (aluif.portA[31] == aluif.portB[31] &amp;&amp; aluif.portA[31] != aluif.outputPort[31])
<a name="30"><q-n>     30  </q-n></a>                    aluif.overflow = 1;
<a name="31"><q-n>     31  </q-n></a>            <q-w>end</q-w>
<a name="32"><q-n>     32  </q-n></a>
<a name="33"><q-n>     33  </q-n></a>            ALU_SUB: <q-w>begin</q-w>
<a name="34"><q-n>     34  </q-n></a>                aluif.outputPort = aluif.portA - aluif.portB;
<a name="35"><q-n>     35  </q-n></a>                <q-w>if</q-w> (aluif.portA[31] != aluif.portB[31] &amp;&amp; aluif.portA[31] != aluif.outputPort[31])
<a name="36"><q-n>     36  </q-n></a>                    aluif.overflow = 1;
<a name="37"><q-n>     37  </q-n></a>            <q-w>end</q-w>
<a name="38"><q-n>     38  </q-n></a>
<a name="39"><q-n>     39  </q-n></a>            ALU_AND:
<a name="40"><q-n>     40  </q-n></a>                aluif.outputPort = aluif.portA &amp; aluif.portB;
<a name="41"><q-n>     41  </q-n></a>
<a name="42"><q-n>     42  </q-n></a>            ALU_OR:
<a name="43"><q-n>     43  </q-n></a>                aluif.outputPort = aluif.portA | aluif.portB;
<a name="44"><q-n>     44  </q-n></a>
<a name="45"><q-n>     45  </q-n></a>            ALU_XOR:
<a name="46"><q-n>     46  </q-n></a>                aluif.outputPort = aluif.portA ^ aluif.portB;
<a name="47"><q-n>     47  </q-n></a>
<a name="48"><q-n>     48  </q-n></a>            ALU_NOR:
<a name="49"><q-n>     49  </q-n></a>                aluif.outputPort = ~(aluif.portA | aluif.portB);
<a name="50"><q-n>     50  </q-n></a>
<a name="51"><q-n>     51  </q-n></a>            ALU_SLT: <q-m>//signed less than</q-m>
<a name="52"><q-n>     52  </q-n></a>                aluif.outputPort = ($<q-w>signed</q-w>(aluif.portA) &lt; $<q-w>signed</q-w>(aluif.portB));
<a name="53"><q-n>     53  </q-n></a>           
<a name="54"><q-n>     54  </q-n></a>            ALU_SLTU: <q-m>//unsigned less than</q-m>
<a name="55"><q-n>     55  </q-n></a>                aluif.outputPort = (aluif.portA &lt; aluif.portB);
<a name="56"><q-n>     56  </q-n></a>        <q-w>endcase</q-w>
<a name="57"><q-n>     57  </q-n></a>    <q-w>end</q-w>
<a name="58"><q-n>     58  </q-n></a>
<a name="59"><q-n>     59  </q-n></a>    <q-w>assign</q-w> aluif.negative = aluif.outputPort[31] ? 1 : 0;
<a name="60"><q-n>     60  </q-n></a>    <q-w>assign</q-w> aluif.zero = aluif.outputPort == '0 ? 1 : 0;
<a name="61"><q-n>     61  </q-n></a>
<a name="62"><q-n>     62  </q-n></a><q-w>endmodule</q-w></pre>
</tt>

  
</body>
</html>
