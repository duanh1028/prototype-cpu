var g_sourceLines = [
'// mapped needs this',
'`include "alu_if.vh"',
'`include "cpu_types_pkg.vh"',
'',
'import cpu_types_pkg::*;',
'',
'// mapped timing needs this. 1ns is too fast',
'`timescale 1 ns / 1 ns',
'',
'module alu_tb;',
'',
'  parameter PERIOD = 10;',
'',
'  logic CLK = 0;',
'',
'  // clock',
'  always #(PERIOD/2) CLK++;',
'',
'  // interface',
'  alu_if aluif ();',
'  // test program',
'  test PROG (.CLK(CLK), .tbif(aluif));',
'  // DUT',
'`ifndef MAPPED',
'  alu DUT(aluif);',
'`else',
'  alu DUT(',
'    .\\aluif.negative (aluif.negative),',
'    .\\aluif.zero (aluif.zero),',
'    .\\aluif.overflow (aluif.overflow),',
'    .\\aluif.aluop (aluif.aluop),',
'    .\\aluif.portA (aluif.portA),',
'    .\\aluif.portB (aluif.portB),',
'    .\\aluif.outputPort (aluif.outputPort)',
'  );',
'`endif',
'',
'endmodule',
'',
'//test cases',
'program test(',
'    input logic CLK,',
'    alu_if.tb tbif',
');',
'',
'    string  tb_test_case;',
'    parameter PERIOD = 10;',
'',
'    initial begin',
'    // SLL',
'    @(posedge CLK)',
'    tb_test_case = "SLL";',
'    tbif.aluop = ALU_SLL;',
'    tbif.portA = 32\'hff;',
'    tbif.portB = 32\'d1;',
'    #(PERIOD);',
'',
'    // SRL',
'    @(posedge CLK)',
'    tb_test_case = "SRL";',
'    tbif.aluop = ALU_SRL;',
'    tbif.portA = 32\'hff;',
'    tbif.portB = 32\'d1;',
'    #(PERIOD);',
'',
'    // ADD',
'    @(posedge CLK)',
'    tb_test_case = "ADD, no overflow";',
'    tbif.aluop = ALU_ADD;',
'    tbif.portA = 32\'h12;',
'    tbif.portB = 32\'hff;',
'    #(PERIOD);',
'',
'    @(posedge CLK)',
'    tb_test_case = "ADD, overflow, negative flag";',
'    tbif.aluop = ALU_ADD;',
'    tbif.portA = 32\'b01000000000000000000000000000000;',
'    tbif.portB = 32\'b01000000000000000000000000000001;',
'    #(PERIOD);',
'',
'    // SUB',
'    @(posedge CLK)',
'    tb_test_case = "SUB, no overflow";',
'    tbif.aluop = ALU_SUB;',
'    tbif.portA = 32\'h12;',
'    tbif.portB = 32\'h11;',
'    #(PERIOD);',
'',
'    @(posedge CLK)',
'    tb_test_case = "SUB, overflow";',
'    tbif.aluop = ALU_SUB;',
'    tbif.portA = 32\'b00000000000000000000000000000111;',
'    tbif.portB = 32\'b10000000000000000000000000000010;',
'    #(PERIOD);',
'',
'    // AND',
'    @(posedge CLK)',
'    tb_test_case = "AND";',
'    tbif.aluop = ALU_AND;',
'    tbif.portA = 32\'hff;',
'    tbif.portB = 32\'hf0;',
'    #(PERIOD);',
'',
'    // OR',
'    @(posedge CLK)',
'    tb_test_case = "OR";',
'    tbif.aluop = ALU_OR;',
'    tbif.portA = 32\'hf0;',
'    tbif.portB = 32\'h0f;',
'    #(PERIOD);   ',
'',
'    // XOR',
'    @(posedge CLK)',
'    tb_test_case = "XOR";',
'    tbif.aluop = ALU_XOR;',
'    tbif.portA = 32\'hff;',
'    tbif.portB = 32\'hf0; //output: 32\'hf',
'    #(PERIOD);',
'',
'    // NOR',
'    @(posedge CLK)',
'    tb_test_case = "NOR, zero flag";',
'    tbif.aluop = ALU_NOR;',
'    tbif.portA = 32\'hf0f0f0f0;',
'    tbif.portB = 32\'h0f0f0f0f;',
'    #(PERIOD);',
'',
'    // SLT',
'    @(posedge CLK)',
'    tb_test_case = "SLT, zeroflag";',
'    tbif.aluop = ALU_SLT;',
'    tbif.portA = 32\'hf0;',
'    tbif.portB = 32\'h0f; //output: 0',
'    #(PERIOD);   ',
'',
'    // SLTU',
'    @(posedge CLK)',
'    tb_test_case = "SLTU";',
'    tbif.aluop = ALU_SLTU;',
'    tbif.portA = 32\'hfffffffe;',
'    tbif.portB = 32\'hffffffff; //output: 1',
'    #(PERIOD);   ',
'        ',
'    end',
'',
'endprogram'
];
countinueBuildStmtTable(g_sourceLines);
